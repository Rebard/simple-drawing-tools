{"version":3,"sources":["assets/images/hexagon.svg","assets/images/circle.svg","components/ControlDrawButton/index.js","components/DrawControl/index.js","components/Polygon/index.js","components/Circle/index.js","components/SvgContainer/index.js","Map/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ControlDrawButton","_ref","icon","iconAlt","onClick","hoverTitle","_useState","useState","_useState2","Object","slicedToArray","react_default","a","createElement","className","e","stopPropagation","src","alt","defaultProps","Function","prototype","DrawControl","handlePolygon","handleCircle","src_components_ControlDrawButton","Hexagon","Circle","Polygon","React","forwardRef","props","ref","assign","memo","SvgContainer","children","objectWithoutProperties","version","xmlns","xmlnsXlink","width","height","style","position","Map","ReactMapboxGl","accessToken","DEFAULT_OPTIONS","stroke","fill","fillOpacity","strokeWidth","drawOptions","MapContainer","state","figureDrawing","pointsPolygon","centerCircle","areaCircle","polygons","circles","viewBox","refPolygon","createRef","refCircle","map","handleControlButton","arguments","length","undefined","_this","setState","addPointPolygon","lngLat","concat","toConsumableArray","lng","lat","drawPolygon","addPointCircle","_this$state","area","circle","current","cx","getAttribute","cy","r","drawCircle","polygon","points","split","pop","worldCoordinate","getWorldCoordinate","_this$getPointSvg","getPointSvg","x","y","newPoints","setAttribute","join","point","toFixed","boundsChanged","setupViewbox","viewbox","getCurrentViewboxSvg","bounds","getBounds","worldCoordinateNe","_ne","worldCoordinateSw","_sw","_this$getPointSvg2","minWidth","maxHeight","_this$getPointSvg3","maxWidth","minHeight","handleClickMap","siny","Math","sin","PI","min","max","log","worldCoordinateCenterCircle","_this$getPointSvg4","_this$getPointSvg5","deltaX","deltaY","radius","sqrt","mouseMoveMap","_this$state2","calculateAreaCircle","circleToPolygon","units","handleClickPoint","splice","calculateAreaPolygon","center","getCenterPolygon","getAdditionlOptions","zoom","additionalOptions","pixel","floor","strokeDasharray","sum","reduce","accum","cur","totalLat","totalLng","proccessingPoints","item","push","_this2","this","_this$state3","getZoom","Map_Map","defaultZoom","maxZoom","containerStyle","onMouseMove","onMove","src_components_DrawControl","components_SvgContainer","components_Polygon","components_Circle","_item$center","Fragment","lib_esm","coordinates","PureComponent","App","src_Map","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b70fd988.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hexagon.ad81c3f7.svg\";","module.exports = __webpack_public_path__ + \"static/media/circle.7859ddb7.svg\";","import React, { memo, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './index.css';\r\n\r\nconst ControlDrawButton = ({ icon, iconAlt, hoverTitle, onClick }) => {\r\n  const [isHover, setIsHover] = useState(false); \r\n  const handleButton = (e) => {\r\n    e.stopPropagation();\r\n    onClick(e);\r\n  }\r\n  return (\r\n    <div className=\"control-button\" onClick={handleButton}>\r\n      <img src={icon} alt={iconAlt} className=\"control-button__icon\"/>\r\n    </div>\r\n  )\r\n}\r\n\r\nControlDrawButton.defaultProps = {\r\n  hoverTitle: '',\r\n  icon: null,\r\n  onClick: Function.prototype,\r\n};\r\n\r\nControlDrawButton.propTypes = {\r\n  hoverTitle: PropTypes.string,\r\n  icon: PropTypes.string,\r\n  onClick: PropTypes.func,\r\n}\r\n\r\nexport default ControlDrawButton;","import React, { memo } from 'react';\r\nimport ControlDrawButton from '../ControlDrawButton';\r\nimport Hexagon from '../../assets/images/hexagon.svg';\r\nimport Circle from '../../assets/images/circle.svg';\r\nimport './index.css';\r\n\r\nconst DrawControl = ({ handlePolygon, handleCircle }) => {\r\n  return (\r\n    <div className=\"draw-control\">\r\n      <ControlDrawButton icon={Hexagon} iconAlt=\"polygon\" onClick={handlePolygon}/>\r\n      <ControlDrawButton icon={Circle} iconAlt=\"circle\" onClick={handleCircle}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DrawControl;","import React, { memo } from 'react';\r\n\r\nconst Polygon = React.forwardRef((props, ref) => (\r\n  <polygon ref={ref} {...props}/>\r\n));\r\n\r\nexport default memo(Polygon);","import React, { memo } from 'react';\r\n\r\nconst Circle = React.forwardRef((props, ref) => (\r\n  <circle ref={ref} {...props} />\r\n));\r\n\r\nexport default memo(Circle);","import React, { memo } from 'react';\r\n\r\nconst SvgContainer = React.forwardRef(({ children, ...props}, ref) => (\r\n  <svg\r\n    version=\"1.1\"\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    xmlnsXlink=\"http://www.w3.org/1999/xlink\"\r\n    width=\"100%\"\r\n    height=\"100%\"\r\n    ref={ref}\r\n    style={{ position: 'relative' }}\r\n    {...props}\r\n  > \r\n    {children}\r\n  </svg> \r\n));\r\n\r\nexport default memo(SvgContainer);","import React, { PureComponent } from 'react';\r\nimport ReactMapboxGl, { Marker } from 'react-mapbox-gl';\r\nimport { area, polygon, circle } from '@turf/turf';\r\nimport DrawControl from '../components/DrawControl';\r\nimport Polygon from '../components/Polygon';\r\nimport Circle from '../components/Circle';\r\nimport SvgContainer from '../components/SvgContainer';\r\nimport './index.css';\r\n\r\nconst accessToken = 'pk.eyJ1IjoicmVicmFuZCIsImEiOiJjangxdHhoYjUwMWZyNGFtcWU4emJ6cHNlIn0.4LJRH7zN8ZDH1ZzHhv5V8A';\r\n\r\nconst Map = ReactMapboxGl({ accessToken });\r\n\r\nconst DEFAULT_OPTIONS = {\r\n  stroke: 'orange',\r\n  fill: 'orange',\r\n  fillOpacity: 0.3,\r\n  strokeWidth: '0.01'\r\n};\r\n\r\nconst drawOptions = {\r\n  fill: '#0097DC',\r\n  fillOpacity: 0.3,\r\n  stroke: 'blue',\r\n  strokeWidth: '0.01'\r\n}\r\n\r\nclass MapContainer extends PureComponent {\r\n\r\n  state = {\r\n    figureDrawing: null,\r\n    pointsPolygon: [],\r\n    centerCircle: null,\r\n    areaCircle: null,\r\n    polygons: [],\r\n    circles: [],\r\n    viewBox: null,\r\n  };\r\n\r\n  refPolygon = React.createRef();\r\n  refCircle = React.createRef();\r\n  map = React.createRef();\r\n\r\n  handleControlButton = (figureDrawing = null) => () => {\r\n    this.setState({\r\n      figureDrawing,\r\n      pointsPolygon: [],\r\n      centerCircle: null,\r\n    });\r\n  }\r\n\r\n  addPointPolygon = (lngLat) => {\r\n    this.setState(state => ({\r\n      pointsPolygon: [...state.pointsPolygon, [lngLat.lng, lngLat.lat]]\r\n    }), () => {\r\n        this.drawPolygon(lngLat);\r\n    })\r\n  }\r\n  \r\n  addPointCircle = (lngLat) => {\r\n    const { centerCircle, areaCircle: area } = this.state;\r\n    const { current: circle } = this.refCircle;\r\n    if (centerCircle) {\r\n      const cx = circle.getAttribute('cx');\r\n      const cy = circle.getAttribute('cy');\r\n      const r = circle.getAttribute('r');\r\n      this.setState(state => ({\r\n        circles: [...state.circles, { cx, cy, r, area }],\r\n        centerCircle: null,\r\n        areaCircle: null,\r\n        figureDrawing: null,\r\n      }));\r\n    } else {\r\n      this.setState({ centerCircle: [lngLat.lng, lngLat.lat] }, () => {\r\n        this.drawCircle(lngLat);\r\n      });\r\n    }\r\n  }\r\n\r\n  drawPolygon = (lngLat) => {\r\n    const { pointsPolygon } = this.state;\r\n    const { current: polygon } = this.refPolygon;\r\n    if (polygon) {\r\n      let points = polygon.getAttribute('points');\r\n      points = points ? points.split(' ') : [];\r\n      if (points.length > pointsPolygon.length)\r\n        points.pop();\r\n      const worldCoordinate = this.getWorldCoordinate(lngLat.lat, lngLat.lng);\r\n      const { x, y } = this.getPointSvg(worldCoordinate);\r\n      const newPoints = [...points, [x, y]];\r\n      polygon.setAttribute('points', newPoints.join(' '));\r\n    }\r\n  }\r\n\r\n  getPointSvg = (point) => {\r\n    const PARAM = 1000;\r\n    return {\r\n      x: (point.x * PARAM).toFixed(3),\r\n      y: (point.y * PARAM).toFixed(3),\r\n    }\r\n  }\r\n\r\n  boundsChanged = (map) => {\r\n    this.setupViewbox(map);\r\n  }\r\n\r\n  setupViewbox = (map) => {\r\n    const viewbox = this.getCurrentViewboxSvg(map);\r\n    this.setState({ viewbox });\r\n  }\r\n\r\n  getCurrentViewboxSvg = (map) => {\r\n    const bounds = map.getBounds();\r\n    const worldCoordinateNe = this.getWorldCoordinate(bounds._ne.lat, bounds._ne.lng);\r\n    const worldCoordinateSw = this.getWorldCoordinate(bounds._sw.lat, bounds._sw.lng);\r\n    const { x: minWidth, y: maxHeight } = this.getPointSvg(worldCoordinateSw);\r\n    const { x: maxWidth, y: minHeight } = this.getPointSvg(worldCoordinateNe);\r\n    const width = maxWidth - minWidth;\r\n    const height = maxHeight - minHeight;\r\n    const viewbox = `${minWidth} ${minHeight} ${width} ${height}`;\r\n    return viewbox;\r\n  }\r\n\r\n  handleClickMap = (map, e) => {\r\n    this.setupViewbox(map);\r\n    const { figureDrawing } = this.state;\r\n    if (figureDrawing === 'circle') {\r\n      this.addPointCircle(e.lngLat);\r\n    }\r\n    if (figureDrawing === 'polygon') {\r\n      this.addPointPolygon(e.lngLat);\r\n    }\r\n  }\r\n\r\n  getWorldCoordinate = (lat, lng) => {\r\n    const TILE_SIZE = 512;\r\n    let siny = Math.sin(lat * Math.PI / 180);\r\n    siny = Math.min(Math.max(siny, -0.9999), 0.9999);\r\n    return {\r\n      x: TILE_SIZE * (0.5 + lng / 360),\r\n      y: TILE_SIZE * (0.5 - Math.log((1 + siny) / (1 - siny)) / (4 * Math.PI))\r\n    };\r\n  }\r\n\r\n  drawCircle = (lngLat) => {\r\n    const { centerCircle } = this.state;\r\n    const { current: circle } = this.refCircle;\r\n    if (circle) {\r\n      const worldCoordinateCenterCircle = this.getWorldCoordinate(centerCircle[1], centerCircle[0]);\r\n      const worldCoordinate = this.getWorldCoordinate(lngLat.lat, lngLat.lng);\r\n      const { x: cx, y: cy } = this.getPointSvg(worldCoordinateCenterCircle);\r\n      const { x, y } = this.getPointSvg(worldCoordinate);\r\n      const deltaX = x - cx;\r\n      const deltaY = y - cy;\r\n      const radius = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\r\n      circle.setAttribute('cx', cx);\r\n      circle.setAttribute('cy', cy);\r\n      circle.setAttribute('r', radius);\r\n    }\r\n  }\r\n\r\n  mouseMoveMap = (map, e) => {\r\n    const { figureDrawing, pointsPolygon, centerCircle } = this.state;\r\n    if (figureDrawing === 'polygon' && pointsPolygon.length)\r\n      this.drawPolygon(e.lngLat);\r\n    if (figureDrawing === 'circle' && centerCircle) {\r\n      this.drawCircle(e.lngLat);\r\n      const areaCircle = this.calculateAreaCircle(centerCircle, e.lngLat);\r\n      this.setState({ areaCircle });\r\n    }\r\n  }\r\n\r\n  calculateAreaCircle = (centerCircle, lngLat) => {\r\n    if (centerCircle) {\r\n      const deltaX = lngLat.lng - centerCircle[0];\r\n      const deltaY = lngLat.lat - centerCircle[1];\r\n      const radius = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\r\n      if (radius) {\r\n        const circleToPolygon = circle(centerCircle, radius, { units: 'degrees' })\r\n        return area(circleToPolygon).toFixed(2);\r\n      }\r\n    }\r\n  }\r\n\r\n  handleClickPoint = (point) => () => {\r\n    const { pointsPolygon } = this.state;\r\n    if (\r\n      pointsPolygon.length > 2 &&\r\n      pointsPolygon[0].x === point.x && \r\n      pointsPolygon[0].y === point.y &&\r\n      this.refPolygon.current\r\n    ) {\r\n      const points = this.refPolygon.current.getAttribute('points').split(' ');\r\n      points.splice(-2);\r\n      const area = this.calculateAreaPolygon(points);\r\n      const center = this.getCenterPolygon(points);\r\n      this.setState(state => ({\r\n        figureDrawing: null,\r\n        polygons: [...state.polygons, { points, area, center }],\r\n        pointsPolygon: [],\r\n      }))\r\n    }\r\n  }\r\n\r\n  getAdditionlOptions = (zoom) => {\r\n    const additionalOptions = {};\r\n    if (zoom < 12) {\r\n      const pixel = Math.floor(zoom) * 5 / zoom;\r\n      additionalOptions.strokeDasharray = `${pixel} ${pixel / 5}`;\r\n      additionalOptions.strokeWidth = `${ pixel / 5 }`;\r\n    }\r\n\r\n    return additionalOptions;\r\n  }\r\n\r\n  getCenterPolygon = (points) => {\r\n    const sum = points.reduce((accum, cur) => {\r\n      const point = cur.split(',');\r\n      return {\r\n        totalLat: accum.totalLat + +point[0],\r\n        totalLng: accum.totalLng + +point[1]\r\n      }\r\n    }, { totalLat: 0, totalLng: 0 });\r\n    const x = sum.totalLat / points.length;\r\n    const y = sum.totalLng / points.length;\r\n    return { x, y };\r\n  }\r\n\r\n  calculateAreaPolygon = (points) => {\r\n    const proccessingPoints = points.map(point => point.split(',').map(item => item / 1000));\r\n    proccessingPoints.push(proccessingPoints[0]);\r\n    return area(polygon([proccessingPoints])).toFixed(2);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      figureDrawing,\r\n      pointsPolygon,\r\n      centerCircle,\r\n      polygons,\r\n      circles,\r\n      viewbox,\r\n      areaCircle,\r\n    } = this.state;\r\n    \r\n    const additionalOptions = this.map.current ? this.getAdditionlOptions(this.map.current.state.map.getZoom()) : {};\r\n    return (\r\n      <Map\r\n        ref={this.map}\r\n        style=\"mapbox://styles/mapbox/streets-v8\"\r\n        defaultZoom={[8]}\r\n        maxZoom={[3]}\r\n        containerStyle={{\r\n          height: '100vh',\r\n          width: '100vw'\r\n        }}\r\n        className={`${figureDrawing && 'draw'}`}\r\n        onClick={this.handleClickMap}\r\n        onMouseMove={this.mouseMoveMap}\r\n        onMove={this.boundsChanged}\r\n      >\r\n        <DrawControl\r\n          handleCircle={this.handleControlButton('circle')}\r\n          handlePolygon={this.handleControlButton('polygon')}\r\n        />\r\n        <SvgContainer viewBox={viewbox}>\r\n          {figureDrawing === 'polygon' && <Polygon ref={this.refPolygon} {...DEFAULT_OPTIONS} {...additionalOptions}/>}\r\n          {figureDrawing === 'circle' && <Circle ref={this.refCircle} {...DEFAULT_OPTIONS} {...additionalOptions} />}\r\n          {polygons.map(item => {\r\n            const points = item.points.join(' ');\r\n            const { x, y } = item.center;\r\n            return <React.Fragment>\r\n              <Polygon {...drawOptions} {...additionalOptions} points={points} /> \r\n              <text x={x} y={y} className=\"text\">{item.area} кв.м</text>\r\n            </React.Fragment>\r\n          })}\r\n          {circles.map(({ area, ...item}) => <React.Fragment>\r\n            <Circle {...drawOptions} {...additionalOptions} {...item} />\r\n            <text className=\"text\"></text>\r\n          </React.Fragment>\r\n          )}\r\n        </SvgContainer>\r\n        {pointsPolygon.map(point => (\r\n          <Marker coordinates={point}>\r\n            <div className=\"point\" onClick={this.handleClickPoint(point)} />\r\n          </Marker>\r\n        ))}\r\n        {centerCircle && \r\n          <Marker coordinates={centerCircle}>\r\n          <div className=\"point\">\r\n            <span className=\"text\">{areaCircle} кв.м</span>\r\n          </div>\r\n          </Marker>\r\n        }       \r\n      </Map>\r\n    );\r\n  }\r\n \r\n};\r\n\r\nexport default MapContainer;","import React from 'react';\r\nimport Map from './Map';\r\n\r\nfunction App() {\r\n  return (\r\n    <Map/>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}